<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2023/03/12/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>【关系数据理论】1.关系数据结构</title>
    <url>/2023/03/12/%E3%80%90%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E7%90%86%E8%AE%BA%E3%80%911.%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<p>&emsp;</p>
<span id="more"></span>
<h1 id="一、关系的数学定义"><a href="#一、关系的数学定义" class="headerlink" title="一、关系的数学定义"></a>一、关系的数学定义</h1><p>现实世界中存在的可以相互区分的事物或概念称为实体（Entity）。在关系模型中，无论是实体集，还是实体集之间的联系均有单一的关系表示。由于关系模型是建立在集合代数基础上的，因而一般从集合论角度对关系数据结构进行定义。</p>
<p><strong>1. 域（Domain）的定义</strong></p>
<p>域（Domain）是一组具有相同数据类型的值的集合。</p>
<p>例如，整数、正数、负数、｛0、1｝等，都可以作为域。</p>
<p><strong>2. 笛卡尔积（Cartesian Product）的定义</strong></p>
<p>给定一组域 $D_1, D_2, \cdots, D_n$，这些域中可以有相同的部分，则 $D_1, D_2, \cdots, D_n$  的笛卡尔积（Cartesian Product）为</p>
<p>$D_1\times D_2\times \cdots \times D_n=\{ (d_1,d_2,\cdots,d_n)|d_i\in D_i, i=1, 2, \cdots, n \}$</p>
<p>式中，每一个元素 $(d_1, d_2, \cdots, d_n)$ 为一个 𝘯 元组（n-Tuple），简称元组（Tuple）。元素中的每一个值 $d_i$ 称作一个分量（Component）。</p>
<p><strong>3. 关系（Relation）的定义</strong></p>
<p>$D_1\times D_2\times \cdots \times D_n$ 的子集称为在域 $D_1, D_2, \cdots, D_n$ 上的关系（Relation），表示为</p>
<p>$R(D_1, D_2, \cdots, D_n)$</p>
<p>式中，𝘙 表示关系的名字，𝘯 是关系的目或度（Degree）。当 𝘯 = 1 时，称该关系为单元关系（Unary Relation）；当 𝘯 = 2 时，称该关系为二元关系（Binary Relation）。</p>
<p><strong>4. 关系模式（Relation Schema）的定义</strong></p>
<p>关系的描述称为关系模式（Relation Schema），关系模式可以形式化地表示为</p>
<p>$R<U,D,Dom,F>$</p>
<p>式中，𝘙 为关系名，𝘜 为关系的属性集合，𝘋 为属性集合 𝘜 中属性的数据域，𝘋𝘰𝘮 为属性到域的映射的集合，𝘍 为属性间数据的依赖关系集合。</p>
<h1 id="二、关系中的基本名词"><a href="#二、关系中的基本名词" class="headerlink" title="二、关系中的基本名词"></a>二、关系中的基本名词</h1><p><strong>1. 元组</strong></p>
<p>关系表中的每一横行称作一个元组（Tuple），组成元组的元素为分量。数据库中的一个实体或实体间的一个联系均使用一个元组表示。</p>
<p><strong>2. 属性</strong></p>
<p>关系中的每一列称为一个属性（Attribute）。属性具有型和值两层含义：属性的型指属性名和属性取值域；属性值指属性具体的取值。由于关系中的属性名具有标识列的作用，因而同一关系中的属性名不能相同。关系中往往有多个属性，属性用于表示实体的特征。</p>
<p><strong>3. 候选码和主码</strong></p>
<p>若关系中的某一属性值（或单个属性）的值能唯一地标识一个元组，则称该属性组（或属性）为候选码（Candidata Key）。为数据管理方便，当一个关系有多个候选码时，应选定其中的一个候选码为主码（Primary Key）。当然，如果关系中只有一个候选码，这个唯一的候选码就是主码。</p>
<p><strong>4. 全码</strong></p>
<p>若关系的候选码中只包含一个属性，则称它为单属性码；若候选码是由多个属性构成的，则称它为多属性码。若关系中只有一个候选码，且这个候选码中包括全部属性，则这种候选码为全码（All-Key）。全码是候选码的特例，它说明该关系中不存在属性之间相互决定的情况。</p>
<p><strong>5. 主属性和非主属性</strong></p>
<p>关系中，候选码中的属性称为主属性（Prime Attribute），不包含在任何候选码中的属性称为非主属性（Non-Key Attribute）。</p>
]]></content>
      <categories>
        <category>关系数据理论</category>
      </categories>
  </entry>
</search>
